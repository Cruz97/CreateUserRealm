"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_link_1 = require("apollo-link");
var apollo_link_context_1 = require("apollo-link-context");
var URI = require("urijs");
var apollo_cache_inmemory_1 = require("apollo-cache-inmemory");
var apollo_client_1 = require("apollo-client");
var apollo_link_http_1 = require("apollo-link-http");
var apollo_link_retry_1 = require("apollo-link-retry");
var apollo_link_ws_1 = require("apollo-link-ws");
var apollo_utilities_1 = require("apollo-utilities");
var fetch = require("isomorphic-fetch");
var ws = require("isomorphic-ws");
var AuthenticationHelper_1 = require("./AuthenticationHelper");
var GraphQLConfig = (function () {
    function GraphQLConfig(user, realmPath, accessToken, authErrorHandler) {
        var _this = this;
        this.user = user;
        this.authErrorHandler = authErrorHandler;
        this.realmPath = realmPath;
        this.token = accessToken.token;
        if (accessToken.expires) {
            this.refreshToken(accessToken.expires - Date.now() - 10000);
        }
        var graphQLEndpoint = new URI(user.server).segmentCoded(["graphql", realmPath]);
        this.httpEndpoint = graphQLEndpoint.toString();
        var subscriptionScheme;
        switch (graphQLEndpoint.scheme()) {
            case "http":
                subscriptionScheme = "ws";
                break;
            case "https":
                subscriptionScheme = "wss";
                break;
            default:
                throw new Error("Unrecognized scheme for the server endpoint: " + graphQLEndpoint.scheme());
        }
        this.webSocketEndpoint = graphQLEndpoint.clone().scheme(subscriptionScheme).toString();
        this.connectionParams = function () {
            if (_this.token) {
                return {
                    token: _this.token,
                };
            }
            return {};
        };
        this.authLink = apollo_link_context_1.setContext(function (_, _a) {
            var headers = _a.headers;
            if (_this.token) {
                return {
                    headers: __assign({}, headers, { authorization: _this.token }),
                };
            }
        });
    }
    GraphQLConfig.create = function (user, realmPath, authErrorHandler, isQueryBasedSync) {
        return __awaiter(this, void 0, void 0, function () {
            var accessToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        realmPath = realmPath.replace("/~/", "/" + user.identity + "/");
                        if (isQueryBasedSync) {
                            realmPath = realmPath + "/__partial/" + user.identity + "/graphql-client";
                        }
                        return [4, AuthenticationHelper_1.AuthenticationHelper.refreshAccessToken(user, realmPath)];
                    case 1:
                        accessToken = _a.sent();
                        return [2, new GraphQLConfig(user, realmPath, accessToken, authErrorHandler)];
                }
            });
        });
    };
    GraphQLConfig.prototype.createApolloClient = function () {
        return this.createApolloClientWithCache(new apollo_cache_inmemory_1.InMemoryCache());
    };
    GraphQLConfig.prototype.createApolloClientWithCache = function (cache) {
        var _this = this;
        var httpLink = apollo_link_http_1.createHttpLink({
            uri: this.httpEndpoint,
            fetch: fetch,
        });
        var subscriptionLink = new apollo_link_ws_1.WebSocketLink({
            uri: this.webSocketEndpoint,
            options: {
                connectionParams: this.connectionParams,
                reconnect: true,
                lazy: true,
            },
            webSocketImpl: ws,
        });
        var retryLink = new apollo_link_retry_1.RetryLink({
            delay: {
                initial: 100,
                max: 5000,
            },
            attempts: {
                max: 3,
                retryIf: function (error) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(error && error.result && error.result.status === 401)) return [3, 2];
                                return [4, this.refreshToken(0, false)];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2: return [2, true];
                        }
                    });
                }); },
            },
        });
        var link = apollo_link_1.split(function (_a) {
            var query = _a.query;
            var _b = apollo_utilities_1.getMainDefinition(query), kind = _b.kind, operation = _b.operation;
            return kind === "OperationDefinition" && operation === "subscription";
        }, subscriptionLink, apollo_link_1.from([retryLink, this.authLink, httpLink]));
        return new apollo_client_1.default({
            link: link,
            cache: cache,
        });
    };
    GraphQLConfig.prototype.refreshToken = function (afterDelay, shouldRetry) {
        if (shouldRetry === void 0) { shouldRetry = true; }
        return __awaiter(this, void 0, void 0, function () {
            var result, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.delay(afterDelay)];
                    case 1:
                        _a.sent();
                        if (!this.user.token) {
                            return [2, false];
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4, AuthenticationHelper_1.AuthenticationHelper.refreshAccessToken(this.user, this.realmPath)];
                    case 3:
                        result = _a.sent();
                        this.token = result.token;
                        this.refreshToken(result.expires - Date.now() - 10000);
                        return [2, true];
                    case 4:
                        e_1 = _a.sent();
                        if (this.authErrorHandler) {
                            shouldRetry = !this.authErrorHandler(e_1) && shouldRetry;
                        }
                        if (shouldRetry) {
                            return [2, this.refreshToken(3000)];
                        }
                        return [3, 5];
                    case 5: return [2, false];
                }
            });
        });
    };
    GraphQLConfig.prototype.delay = function (ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    };
    return GraphQLConfig;
}());
exports.GraphQLConfig = GraphQLConfig;
//# sourceMappingURL=GraphqlConfig.js.map