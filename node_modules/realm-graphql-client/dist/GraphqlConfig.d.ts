import { ApolloLink } from "apollo-link";
import { ApolloCache } from "apollo-cache";
import { NormalizedCacheObject } from "apollo-cache-inmemory";
import ApolloClient from "apollo-client";
import { ConnectionParams } from "subscriptions-transport-ws";
import { User } from "./User";
export declare class GraphQLConfig {
    static create(user: User, realmPath: string, authErrorHandler?: (error: any) => boolean, isQueryBasedSync?: boolean): Promise<GraphQLConfig>;
    readonly httpEndpoint: string;
    readonly webSocketEndpoint: string;
    readonly connectionParams: () => ConnectionParams;
    readonly authLink: ApolloLink;
    private readonly user;
    private readonly authErrorHandler;
    private readonly realmPath;
    private token;
    private constructor();
    createApolloClient(): ApolloClient<NormalizedCacheObject>;
    createApolloClientWithCache<TCacheShape>(cache: ApolloCache<TCacheShape>): ApolloClient<TCacheShape>;
    refreshToken(afterDelay: number, shouldRetry?: boolean): Promise<boolean>;
    private delay(ms);
}
