"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var isomorphicFetch = require("isomorphic-fetch");
var URI = require("urijs");
var User_1 = require("./User");
var AuthenticationHelper = (function () {
    function AuthenticationHelper() {
    }
    AuthenticationHelper.authenticate = function (credentials, server) {
        return __awaiter(this, void 0, void 0, function () {
            var authUri, result, options, response, body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authUri = new URI(server).path("/auth");
                        if (authUri.scheme() !== "http" && authUri.scheme() !== "https") {
                            throw new Error("The server scheme must be 'http(s)'. Got: " + authUri.scheme() + " ");
                        }
                        if (credentials.provider === "__anonymous") {
                            return [2, new User_1.User({
                                    identity: null,
                                    isAdmin: false,
                                    server: server,
                                    token: null,
                                })];
                        }
                        if (credentials.provider === "__admin") {
                            result = new User_1.User({
                                identity: "__admin",
                                isAdmin: true,
                                server: server,
                                token: credentials.data,
                            });
                            result.isTokenUser = true;
                            return [2, result];
                        }
                        credentials.app_id = "";
                        options = {
                            method: "POST",
                            body: JSON.stringify(credentials),
                            headers: AuthenticationHelper.postHeaders,
                            open_timeout: 5000,
                        };
                        return [4, AuthenticationHelper.fetch(authUri.toString(), options)];
                    case 1:
                        response = _a.sent();
                        return [4, response.json()];
                    case 2:
                        body = _a.sent();
                        if (response.status !== 200) {
                            throw {
                                name: "AuthError",
                                status: response.status,
                                statusText: response.statusText,
                                body: body,
                            };
                        }
                        else {
                            return [2, new User_1.User({
                                    identity: body.refresh_token.token_data.identity,
                                    isAdmin: body.refresh_token.token_data.is_admin,
                                    server: server,
                                    token: body.refresh_token.token,
                                })];
                        }
                        return [2];
                }
            });
        });
    };
    AuthenticationHelper.refreshAccessToken = function (user, realmPath) {
        return __awaiter(this, void 0, void 0, function () {
            var options, authUri, response, body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!user.server) {
                            throw new Error("Server for user must be specified");
                        }
                        if (user.identity === null && user.token === null) {
                            return [2, {
                                    token: null,
                                    expires: null,
                                }];
                        }
                        if (user.isTokenUser) {
                            return [2, {
                                    token: user.token,
                                    expires: null,
                                }];
                        }
                        options = {
                            method: "POST",
                            body: JSON.stringify({
                                data: user.token,
                                path: realmPath,
                                provider: "realm",
                                app_id: "",
                            }),
                            headers: AuthenticationHelper.postHeaders,
                            timeout: 5000.0,
                        };
                        authUri = new URI(user.server).path("/auth");
                        return [4, AuthenticationHelper.fetch(authUri.toString(), options)];
                    case 1:
                        response = _a.sent();
                        return [4, response.json()];
                    case 2:
                        body = _a.sent();
                        if (response.status !== 200) {
                            throw {
                                name: "AuthError",
                                status: response.status,
                                statusText: response.statusText,
                                body: body,
                            };
                        }
                        return [2, {
                                token: body.access_token.token,
                                expires: body.access_token.token_data.expires * 1000,
                            }];
                }
            });
        });
    };
    AuthenticationHelper.revoke = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var options, authUri, response, body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!user.server) {
                            throw new Error("Server for user must be specified");
                        }
                        if (user.isTokenUser) {
                            return [2];
                        }
                        options = {
                            method: "POST",
                            body: JSON.stringify({
                                token: user.token,
                            }),
                            headers: __assign({ authorization: user.token }, AuthenticationHelper.postHeaders),
                            timeout: 5000.0,
                        };
                        authUri = new URI(user.server).path("/auth/revoke");
                        return [4, AuthenticationHelper.fetch(authUri.toString(), options)];
                    case 1:
                        response = _a.sent();
                        if (!(response.status !== 200)) return [3, 3];
                        return [4, response.json()];
                    case 2:
                        body = _a.sent();
                        throw {
                            name: "AuthError",
                            status: response.status,
                            statusText: response.statusText,
                            body: body,
                        };
                    case 3: return [2];
                }
            });
        });
    };
    AuthenticationHelper.fetch = isomorphicFetch;
    AuthenticationHelper.postHeaders = {
        "content-type": "application/json;charset=utf-8",
        "accept": "application/json",
    };
    return AuthenticationHelper;
}());
exports.AuthenticationHelper = AuthenticationHelper;
//# sourceMappingURL=AuthenticationHelper.js.map